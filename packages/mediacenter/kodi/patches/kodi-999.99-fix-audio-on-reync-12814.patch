From e2042c59bfbccc9a03b025e7006f524632feed49 Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Tue, 19 Sep 2017 20:03:34 +0200
Subject: [PATCH 1/2] VideoPlayer: flush audio on resync if clock is far ahead

---
 xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index 78ab1f79ab11..935ca947ab82 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -315,7 +315,12 @@ void CVideoPlayerAudio::Process()
       CLog::Log(LOGDEBUG, "CVideoPlayerAudio - CDVDMsg::GENERAL_RESYNC(%f), level: %d, cache: %f",
                 pts, m_messageQueue.GetLevel(), m_audioSink.GetDelay());
 
-      m_audioClock = pts + m_audioSink.GetDelay();
+      double delay = m_audioSink.GetDelay();
+      if (pts > m_audioClock - delay + 0.5 * DVD_TIME_BASE)
+      {
+        m_audioSink.Flush();
+      }
+      m_audioClock = pts + delay;
       if (m_speed != DVD_PLAYSPEED_PAUSE)
         m_audioSink.Resume();
       m_syncState = IDVDStreamPlayer::SYNC_INSYNC;
@@ -501,7 +506,7 @@ bool CVideoPlayerAudio::ProcessDecoderOutput(DVDAudioFrame &audioframe)
   audioframe.framesOut += framesOutput;
 
   // signal to our parent that we have initialized
-  if(m_syncState == IDVDStreamPlayer::SYNC_STARTING)
+  if (m_syncState == IDVDStreamPlayer::SYNC_STARTING)
   {
     double cachetotal = DVD_SEC_TO_TIME(m_audioSink.GetCacheTotal());
     double cachetime = m_audioSink.GetDelay();

From bf0740e700d29bce952884323ae493a88f9bbff3 Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Wed, 20 Sep 2017 20:01:15 +0200
Subject: [PATCH 2/2] VideoPlayer: fix audio cache times

---
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp       |  7 ++++++-
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.h         |  6 ++++--
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.cpp |  7 ++++++-
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.h   |  1 +
 xbmc/cores/AudioEngine/Interfaces/AEStream.h               |  6 ++++++
 xbmc/cores/VideoPlayer/AudioSinkAE.cpp                     | 14 +++++++++++---
 xbmc/cores/VideoPlayer/AudioSinkAE.h                       |  3 ++-
 xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp                | 10 +++++-----
 8 files changed, 41 insertions(+), 13 deletions(-)

diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
index 2857a8577db6..d55620fa930b 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.cpp
@@ -213,7 +213,12 @@ float CEngineStats::GetCacheTime(CActiveAEStream *stream)
   return delay;
 }
 
-float CEngineStats::GetCacheTotal(CActiveAEStream *stream)
+float CEngineStats::GetCacheTotal()
+{
+  return MAX_CACHE_LEVEL;
+}
+
+float CEngineStats::GetMaxDelay()
 {
   return MAX_CACHE_LEVEL + MAX_WATER_LEVEL + m_sinkCacheTotal;
 }
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.h b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.h
index 1e4f8174cbc0..43a5b57d4883 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.h
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAE.h
@@ -190,7 +190,8 @@ class CEngineStats
   void GetDelay(AEDelayStatus& status, CActiveAEStream *stream);
   void GetSyncInfo(CAESyncInfo& info, CActiveAEStream *stream);
   float GetCacheTime(CActiveAEStream *stream);
-  float GetCacheTotal(CActiveAEStream *stream);
+  float GetCacheTotal();
+  float GetMaxDelay();
   float GetWaterLevel();
   void SetSuspended(bool state);
   void SetDSP(bool state);
@@ -285,7 +286,8 @@ class CActiveAE : public IAE, public IDispResource, private CThread
   void GetDelay(AEDelayStatus& status, CActiveAEStream *stream) { m_stats.GetDelay(status, stream); }
   void GetSyncInfo(CAESyncInfo& info, CActiveAEStream *stream) { m_stats.GetSyncInfo(info, stream); }
   float GetCacheTime(CActiveAEStream *stream) { return m_stats.GetCacheTime(stream); }
-  float GetCacheTotal(CActiveAEStream *stream) { return m_stats.GetCacheTotal(stream); }
+  float GetCacheTotal() { return m_stats.GetCacheTotal(); }
+  float GetMaxDelay() { return m_stats.GetMaxDelay(); }
   void FlushStream(CActiveAEStream *stream);
   void PauseStream(CActiveAEStream *stream, bool pause);
   void StopSound(CActiveAESound *sound);
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.cpp
index 30e4fb267a59..c3b77b4b23b0 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.cpp
@@ -372,7 +372,12 @@ double CActiveAEStream::GetCacheTime()
 
 double CActiveAEStream::GetCacheTotal()
 {
-  return m_activeAE->GetCacheTotal(this);
+  return m_activeAE->GetCacheTotal();
+}
+
+double CActiveAEStream::GetMaxDelay()
+{
+  return m_activeAE->GetMaxDelay();
 }
 
 void CActiveAEStream::Pause()
diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.h b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.h
index d58e8d5b4aa7..48a003e1f342 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.h
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEStream.h
@@ -158,6 +158,7 @@ class CActiveAEStream : public IAEStream
   bool IsBuffering() override;
   double GetCacheTime() override;
   double GetCacheTotal() override;
+  double GetMaxDelay() override;
 
   void Pause() override;
   void Resume() override;
diff --git a/xbmc/cores/AudioEngine/Interfaces/AEStream.h b/xbmc/cores/AudioEngine/Interfaces/AEStream.h
index 5ec7410732c5..a3f5cfb4ca49 100644
--- a/xbmc/cores/AudioEngine/Interfaces/AEStream.h
+++ b/xbmc/cores/AudioEngine/Interfaces/AEStream.h
@@ -117,6 +117,12 @@ class IAEStream
   virtual double GetCacheTotal() = 0;
 
   /**
+   * Returns the total time in seconds of maximum delay
+   * @return seconds
+   */
+  virtual double GetMaxDelay() = 0;
+
+  /**
    * Pauses the stream playback
    */
   virtual void Pause() = 0;
diff --git a/xbmc/cores/VideoPlayer/AudioSinkAE.cpp b/xbmc/cores/VideoPlayer/AudioSinkAE.cpp
index 752d84b8c1fd..200e75770769 100644
--- a/xbmc/cores/VideoPlayer/AudioSinkAE.cpp
+++ b/xbmc/cores/VideoPlayer/AudioSinkAE.cpp
@@ -109,7 +109,7 @@ unsigned int CAudioSinkAE::AddPackets(const DVDAudioFrame &audioframe)
 
   CSingleLock lock (m_critSection);
 
-  if(!m_pAudioStream)
+  if (!m_pAudioStream)
     return 0;
 
   CAESyncInfo info = m_pAudioStream->GetSyncInfo();
@@ -252,7 +252,7 @@ bool CAudioSinkAE::IsValidFormat(const DVDAudioFrame &audioframe)
 double CAudioSinkAE::GetCacheTime()
 {
   CSingleLock lock (m_critSection);
-  if(!m_pAudioStream)
+  if (!m_pAudioStream)
     return 0.0;
 
   double delay = 0.0;
@@ -265,11 +265,19 @@ double CAudioSinkAE::GetCacheTime()
 double CAudioSinkAE::GetCacheTotal()
 {
   CSingleLock lock (m_critSection);
-  if(!m_pAudioStream)
+  if (!m_pAudioStream)
     return 0.0;
   return m_pAudioStream->GetCacheTotal();
 }
 
+double CAudioSinkAE::GetMaxDelay()
+{
+  CSingleLock lock (m_critSection);
+  if (!m_pAudioStream)
+    return 0.0;
+  return m_pAudioStream->GetMaxDelay();
+}
+
 double CAudioSinkAE::GetPlayingPts()
 {
   if (m_playingPts == DVD_NOPTS_VALUE)
diff --git a/xbmc/cores/VideoPlayer/AudioSinkAE.h b/xbmc/cores/VideoPlayer/AudioSinkAE.h
index 84de2f96df56..e78b57ad6650 100644
--- a/xbmc/cores/VideoPlayer/AudioSinkAE.h
+++ b/xbmc/cores/VideoPlayer/AudioSinkAE.h
@@ -52,7 +52,8 @@ class CAudioSinkAE : IAEClockCallback
   unsigned int AddPackets(const DVDAudioFrame &audioframe);
   double GetPlayingPts();
   double GetCacheTime();
-  double GetCacheTotal(); // returns total amount the audio device can buffer
+  double GetCacheTotal(); // returns total time a stream can buffer
+  double GetMaxDelay(); // returns total time of audio in AE for the stream
   double GetDelay(); // returns the time it takes to play a packet if we add one at this time
   double GetSyncError();
   void SetSyncErrorCorrection(double correction);
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
index 935ca947ab82..20b535f8ed7a 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
@@ -508,16 +508,16 @@ bool CVideoPlayerAudio::ProcessDecoderOutput(DVDAudioFrame &audioframe)
   // signal to our parent that we have initialized
   if (m_syncState == IDVDStreamPlayer::SYNC_STARTING)
   {
-    double cachetotal = DVD_SEC_TO_TIME(m_audioSink.GetCacheTotal());
-    double cachetime = m_audioSink.GetDelay();
-    if (cachetime >= cachetotal * 0.5)
+    double cachetotal = m_audioSink.GetCacheTotal();
+    double cachetime = m_audioSink.GetCacheTime();
+    if (cachetime >= cachetotal * 0.75)
     {
       m_syncState = IDVDStreamPlayer::SYNC_WAITSYNC;
       m_stalled = false;
       SStartMsg msg;
       msg.player = VideoPlayer_AUDIO;
-      msg.cachetotal = cachetotal;
-      msg.cachetime = cachetime;
+      msg.cachetotal = m_audioSink.GetMaxDelay() * DVD_TIME_BASE;
+      msg.cachetime = m_audioSink.GetDelay();
       msg.timestamp = audioframe.hasTimestamp ? audioframe.pts : DVD_NOPTS_VALUE;
       m_messageParent.Put(new CDVDMsgType<SStartMsg>(CDVDMsg::PLAYER_STARTED, msg));
 
